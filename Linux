why linux? 
It is Free, Secure,Opensource, Multiple Distributions, fast

Architecure Linux os:
1)Heart of linux is Kernal    (kernal is responsible for device management,memory management, process management, handling system related calls)
2) on top kernel we have system libraries  (they are responsible for performing a task example: libc is one of the system library)
3) on top of system libraries, we have compilers,         we have soem user proccesses  , we have system software  (if we want java we need java compilers etc)

tagh.txt
raghu
RAGHU
grep <search term>  <filename>
grep raghu  :output:raghu (linux is cases sessitive so output only raghu)
grep -i raghu  :output:raghu (to remove sessitive so output is raghu, RAGHU)

cut command is used to divide the string using delimitter

cut -d / -f1  
$ echo www.google.com | cut -d . -f1
www
$ echo www.google.com | cut -d . -f2
google
$ echo www.google.com | cut -d . -f3
com

------------------------------------------------------

ubuntu@ip-172-31-29-20:~$ echo www/google/com | awk -F / '{print $1F}'
www
$ echo www/google/com | awk -F / '{print $2f}'
google
$ echo www/google/com | awk -F / '{print $3f}'
com

to get last element:
$ echo www/google/com | awk -F / '{print $NF}'
com
----------------------------------------------------------------
chmod ugo+rwx filename    (u=user,g=group,o=other r=read,w=write,x=execute)
------------------------------------------------------
useradd:
useradd raghu  (no password)
adduser raghu  (along with password)
------------------------------------
cat /etc/passwd   (to see all users in system)
or
getent passwd

----------------------------------------
to create password:
passwd <username>
------------------------------------------------

by default linux disable the password authnticatio for users to login we need to enable it


/etc/ssh/sshd_config : it is crucial file if we do mistakes we can loose access to server completely,as ssh information is there and ssh is central point to access servers.


so always take backup
cp /etc/ssh/sshd_config /tmp/sshd_config_backup
vim /etc/ssh/sshd_config

go to PasswordAuthentocation and change from No to yes.
-------------------------------------
sshd -t  :it check for syntax

 sshd -t
/etc/ssh/sshd_config line 6: no argument after keyword "sss"
/etc/ssh/sshd_config: terminating, 1 bad configuration options

we need to restart the service: systemctl restart sshd
-------------------------------
creating a group:
when ever you create a user a group also created of same user name
1)Pronary group -> devops
2) secondary group -> testers  ( suppose he needs to some work for testers we add temporary to testers group)
--------------------------------------------------------------------------
aws error: failed check 1/2
The instance 'i-04fa64e499de860fc' is not in a state from which it can be started.
---------------------------------------------------------------------------------------
Failed to connect to your instance
EC2 Instance Connect is unable to connect to your instance. Ensure your instance network settings are configured correctly for EC2 Instance Connect. 
For more information, see EC2 Instance Connect Prerequisites at https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-prerequisites.html.
--------------------------------------------------------------------------------------------------------------------------
id <username> : to check user groups

groupadd devops -> to create a group

usermod -g <groupname> <username>: to add user to group       small g to add to primary group, capital G is for adding secondary group     

getent group : to see groups
usermod -aG <groupname> <username> : (a is append, G is to add as secondary group)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
gpasswd -d <username> <groupname> :remove from group


it is mandatory that user should be part of atleast one group
if employee is leaving we nned to remove from group and delete the user.

-----------------------------------------------
usermod -g devops raghu
root@ip-172-31-22-12:/home/ubuntu# id raghu
uid=1001(raghu) gid=1002(devops) groups=1002(devops)
root@ip-172-31-22-12:/home/ubuntu# usermod -aG testing  raghu
root@ip-172-31-22-12:/home/ubuntu# id raghu
uid=1001(raghu) gid=1002(devops) groups=1002(devops),1003(testing)
root@ip-172-31-22-12:/home/ubuntu# gpasswd -d raghu testing
Removing user raghu from group testing
root@ip-172-31-22-12:/home/ubuntu# id raghu
uid=1001(raghu) gid=1002(devops) groups=1002(devops)
root@ip-172-31-22-12:/home/ubuntu# 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
giving access for ssh login to new user

cd raghu
raghu1@ip-172-31-22-12:~/raghu$ ssh-keygen -f raghu1
Generating public/private ed25519 key pair.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in raghu1
Your public key has been saved in raghu1.pub
The key fingerprint is:
The key's randomart image is:
+--[ED25519 256]--+
|+=.++oo+*o.+oo   |
|.o+.== o+.  o o  |
|  ++==.+       = |
|  .Bo.+ o     E +|
|  ..oo..So   o =.|
|       .o     . .|
|                 |
|                 |
|                 |
+----[SHA256]-----+

copy the pub key content and send raghu.pub to administrator

from root login go to user home account folder
root@ip-172-31-22-12:/home# cd raghu1
root@ip-172-31-22-12:/home/raghu1# 

create a directory  .ssh in side home folder of sivakumar
root@ip-172-31-22-12:/home/raghu1# mkdir .ssh
chmod 700 .ssh : to give access to that user only


go to .ssh folder and create a file with name authorized_keys and paste the userpublic key inside it
root@ip-172-31-22-12:/home/raghu1# cd .ssh
root@ip-172-31-22-12:/home/raghu1/.ssh# vim authorized_keys

give read persmissions to user 
chmod 400 authorized_keys 

change the ownership from root to user
chown <user>:<group>
chown raghu1:raghu1 -R .ssh    : R is for recursive for all files inside it

ls - la : to see all files

check user login from ssh: ssh -i raghu1.pem raghu1@35.91.54.165
----------------------------------------------------------------
root@ip-172-31-22-12:/home/raghu1# ls -la
total 32
drwxr-x--- 4 raghu1 raghu1 4096 Jul  9 18:37 .
drwxr-xr-x 5 root   root   4096 Jul  9 17:50 ..
-rw------- 1 raghu1 raghu1  119 Jul  9 18:19 .bash_history
-rw-r--r-- 1 raghu1 raghu1  220 Jul  9 17:50 .bash_logout
-rw-r--r-- 1 raghu1 raghu1 3771 Jul  9 17:50 .bashrc
-rw-r--r-- 1 raghu1 raghu1  807 Jul  9 17:50 .profile
drwxr-xr-x 2 root   root   4096 Jul  9 18:37 .ssh
----------------------------------------------------------------
ls -la : hidden files

---------------------------
the new user has to generate ssh key and send the public key to admin
--------------
sudo mkdir /home/raghu
sudo chown raghu:devops /home/raghu
sudo chmod 755 /home/raghu
sudo su - raghu
--------------------------------------------------------------------------------------------

to delete the user: we can't delete the user directly from primary group we have to assugn to self user group 

root@ip-172-31-22-12:/home/raghu1/raghu# gpasswd -d raghu devops
Removing user raghu from group devops

see still devops is there:
root@ip-172-31-22-12:/home/raghu1/raghu# id raghu
uid=1001(raghu) gid=1002(devops) groups=1002(devops)

adding to group:
root@ip-172-31-22-12:/home/raghu1/raghu# usermod -g raghu raghu
root@ip-172-31-22-12:/home/raghu1/raghu# id raghu
uid=1001(raghu) gid=1001(raghu) groups=1001(raghu)

delete the user:
root@ip-172-31-22-12:/home/raghu1/raghu# userdel raghu
root@ip-172-31-22-12:/home/raghu1/raghu# is raghu

root@ip-172-31-22-12:/home/raghu1/raghu# id raghu
id: ‘raghu’: no such user
--------------------------------------------------------------------------------------------------------------------

delete the group: we cant delete tyhe group if there are users

groupdel <groupname>

---------------------------------------------------------------------------------------------------------------------------
process management:
everything inside linux is process

pid is its process id
ppid is its parent process id

for example the ps -ef is parent is bash
UID          PID    PPID  C STIME TTY          TIME CMD
root        3982    3981  0 20:39 pts/3    00:00:00 bash
root        4690    3982  0 21:03 pts/3    00:00:00 ps -ef

even to give simple command output it will create process

they are 2 types foreground process  and background process

example: sleep 10
we cant do anything in foreground

suppose same if we give : sleep 10 &
it will run in background
root        4786    3982  0 22:04 pts/3    00:00:00 sleep 10
root        4787    3982  0 22:04 pts/3    00:00:00 ps -ef
---------------------------------------------------------------------------------------------------------------------------
sleep 10 & 
ps -ef | grep sleep

root@ip-172-31-22-12:/home/raghu1/raghu# ps -ef | grep sleep
root        4794    3982  0 22:07 pts/3    00:00:00 sleep 10
root        4796    3982  0 22:07 pts/3    00:00:00 grep --color=auto sleep


kill <PID>     : we are requesting the process to stop, termiating
kill -9 <pid> : we are forcing to kill


-------------------------------------------------------------------------------------------------
top
-----------------------------------------------

package management:
ubuntu: apt-get
redhat: yum


yum list installed
yum list available
yum remove git -y

----------------------------------------------------------------------------------------------------


/etc/passwd :will have user ininfo


----------------------------------------------------------------------------------------------
Service Management:
if we dont give proper port no the request will come to system and stop (like if we give address with out apt door no, it will come to apt and stop)

ssh port no is 22
http: 80
https: 443
mysql: 3006
smtp:25

we can change port no if required
sudo yum install nginx -y  (ti install nginx)
sudo systemctl start nginx   (it will start the service)
sudo systemctl enable nginx  (after restart system , if we enable the service it will start automatically)
sudo systemctl disable nginx  (if we disable the service it will not start automaticaly)
systemctl status nginx (to know runnning statius on port 80)


goto <ipaddtesspublic>:80  in browser
Welcome to nginx!
If you see this page, the nginx web server is successfully installed and working. Further configuration is required.

For online documentation and support please refer to nginx.org.
Commercial support is available at nginx.com.

Thank you for using nginx.

as http is running we get sucess on port 80
if http is not running we get error (check by stopping nginx: sudo systemctl stop nginx)

------------------------------------------------------------------------------------------------------------------------------
Network statistics:(netstat)
netstat -l : l for listing
neststat -lntp 

-l: Show only listening ports.
-n: Show numerical addresses instead of resolving hosts.
-t: Show TCP ports.
-p: Show the process using the port.

[ec2-user@ip-172-31-31-201 ~]$ sudo netstat -lntp
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      2144/sshd: /usr/sbi 
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      25958/nginx: master 
tcp6       0      0 :::22                   :::*                    LISTEN      2144/sshd: /usr/sbi 
tcp6       0      0 :::80                   :::*                    LISTEN      25958/nginx: master               

----------------------------------------------------------------------------------------------------------------------------------------------
Troubleshooting:
system resources
   CPU memory  -> top
   HD full     -> df -hT
   RAM full    -> free -m   (m to show in megabyts, g for gigabytes)
process is running or not ---> ps -ef | grep nginx
port opened or not --> netsstat -lntp
systemctl status ‹service> 
firewall is opened or not -->

--------------------------------------------------------------------
giving admin access:

Linux Admin -> full access to linux DevOps Admin --> limited sudo access
ramesh -> admin (add him to wheel group or give him admin access by adding below wheel group in sudoers file   %admin ALL=(ALL)    ALL)

to give limited permissions to suresh for only yum and systemctl:
-------------------------------------------------------------------
vim /etc/sudoers.d/devops       (we can also give here the below as opening direct file is danger)
vim /etc/sudoers.d/admin      (for admin we can create another file instead of touching the main file)

i can simply delete the file by "rm -rf devops"

suresh -> devops  (  %devops ALL=(ALL) /usr/bin/yum, /usr/bin/systemctl     ) add same below admin to find path of command give (which yum -->/usr/bin/yum, which systemctl->/usr/bin/systemctl )
/etc/sudoers --> go to this and open visudo (it will open safely and check for syntax instead of vim)


whereis git
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


install nginx and open port 80

in the above path we can see the html file on nginx?
cd /usr/share/nginx/html

in cmd give below:
echo "hi this raghav" >> hello.html

now open in browser: now you see hi this is raghav
http://34.209.47.173/hello.html
--------------------------------------------------
front-end servers = http servers = 80
hosts html/js based applications
-----------------------------------------------------------
back-end servers = http = 8080
tomcat, jboss, etc java, NET, Python

both backend and frontend are connected by api
-------------------------------------------------------------------------------------------------------------------

linux folder structures:
/ --> roor folder
boot -→> when server is getting started, server refers this directory and config fr grub.cfg
dev --> devices --> external devices are mounted here 
etc -→> extra configuration   (all installed software like nginx information is stored here) when we install with yum or apt-get will store here
home -> users home directory are created here 
lib/lib64 --> system needs libraries  (like sustem32 in windows)
/media --> cd/dvd
/mnt --> extra disk amount here 
/opt -->optional, manual installation of services or applications will be stored downloaded here
/proc --> running process will store here with their process-id   ( cat /proc/meminfo,    cat proc/cpuinfo) <- where will all the cpu information contain in linux> ans: proc/cpuinfo
/root --> root user home folder
/run -> when server starts , server uses this directory as storage
/bin --> all commands will ne installed here (cat , touch )
/sbin --> system commands like root access commands
/tmp --> temporary files
/usr --> all users info
/var --> variables all logfiles of server and appplication (like who are accessing nginx, system log files who are accessing)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------


symlink(symbolic link is shortcut it will point to different inode, when  original file is deleted softlink will not work) vs hardlink (points to same inode):

touch raghu
[root@ip-172-31-25-86 ec2-user]# ls -li
9823600 -rw-r--r--. 1 root     root          0 Jul 10 22:25 raghu

9823600 is the inode where this raghu file is tored in memory

to create softlinks;

[root@ip-172-31-25-86 ec2-user]# ln -s raghu /tmp/hello-soft
[root@ip-172-31-25-86 ec2-user]# cd /tmp
[root@ip-172-31-25-86 tmp]# ls -l
total 0
lrwxrwxrwx. 1 root root  5 Jul 10 22:30 hello-soft -> raghu

hardlink:
ln /path/to/original/file /path/to/hard/link
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------













